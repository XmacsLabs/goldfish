<TMU|<tuple|1.1.0|2025.0.9>>

<style|<tuple|generic|chinese|goldfish|literate|reduced-margins>>

<\body>
  <\hide-preamble>
    <assign|r7rs|<flag|R7RS|dark cyan>>

    <assign|srfi|<flag|SRFI|dark red>>

    <assign|font|math=Latin Modern Math,cjk=Noto CJK SC,CMU>
  </hide-preamble>

  <chapter|(liii range)>

  <section|许可证>

  <\goldfish-chunk|goldfish/liii/range.scm|false|true>
    ;

    ; Copyright (C) 2024 The Goldfish Scheme Authors

    ;

    ; Licensed under the Apache License, Version 2.0 (the "License");

    ; you may not use this file except in compliance with the License.

    ; You may obtain a copy of the License at

    ;

    ; http://www.apache.org/licenses/LICENSE-2.0

    ;

    ; Unless required by applicable law or agreed to in writing, software

    ; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT

    ; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

    ; License for the specific language governing permissions and limitations

    ; under the License.

    ;

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/range-test.scm|false|true>
    ;

    ; Copyright (C) 2024 The Goldfish Scheme Authors

    ;

    ; Licensed under the Apache License, Version 2.0 (the "License");

    ; you may not use this file except in compliance with the License.

    ; You may obtain a copy of the License at

    ;

    ; http://www.apache.org/licenses/LICENSE-2.0

    ;

    ; Unless required by applicable law or agreed to in writing, software

    ; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT

    ; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

    ; License for the specific language governing permissions and limitations

    ; under the License.

    ;

    \;
  </goldfish-chunk>

  <section|接口>

  <\goldfish-chunk|goldfish/liii/range.scm|true|true>
    (define-library (liii range)

    (import (liii oop) (only (liii lang) rich-list))

    (export range)

    (begin

    \;
  </goldfish-chunk>

  <section|测试>

  <\goldfish-chunk|tests/goldfish/liii/range-test.scm|true|true>
    (import (liii check) (liii range) (liii base) (liii lang))

    \;

    (check-set-mode! 'report-failed)

    \;
  </goldfish-chunk>

  <section|实现>

  <\goldfish-chunk|goldfish/liii/range.scm|true|true>
    (define-case-class range

    \ \ ((start integer?) (end integer?) (step integer?) (inclusive? boolean?))

    \;
  </goldfish-chunk>

  <subsection|静态方法>

  <paragraph|@inclusive>

  <\goldfish-chunk|goldfish/liii/range.scm|true|true>
    (define* (@inclusive start end (step 1))

    \ \ (range start end step #t))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/range-test.scm|true|true>
    (let1 r (range :inclusive 1 2)

    \ \ (check (r 'start) =\<gtr\> 1)

    \ \ (check (r 'end) =\<gtr\> 2)

    \ \ (check (r 'step) =\<gtr\> 1)

    \ \ (check-true (r 'inclusive?)))

    \;

    (let1 r (range :inclusive 1 3 2)

    \ \ (check (r 'start) =\<gtr\> 1)

    \ \ (check (r 'end) =\<gtr\> 3)

    \ \ (check (r 'step) =\<gtr\> 2)

    \ \ (check-true (r 'inclusive?)))

    \;
  </goldfish-chunk>

  <subsection|谓词>

  <\goldfish-chunk|goldfish/liii/range.scm|true|true>
    (define (%empty?)

    \ \ (or (and (\<gtr\> start end) (\<gtr\> step 0))

    \ \ \ \ \ \ (and (\<less\> start end) (\<less\> step 0))

    \ \ \ \ \ \ (and (= start end) (not inclusive?))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|goldfish/liii/range.scm|true|true>
    (define (%map map-func)

      (if (%empty?)

          (rich-list :empty)

          (let loop ((current start) (result '()))

            (cond

              ((or (and (\> step 0) (if inclusive? (\> current end) (\>= current end)))

                    (and (\< step 0) (if inclusive? (\< current end) (\<= current end))))

                (rich-list (reverse result)))

              (else

                (loop (+ current step)

                      (cons (map-func current) result)))))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|goldfish/liii/range.scm|true|false>
    (define (%for-each proc)

      (let loop ((current start))

        (cond

          ((or (and (\> step 0) (if inclusive? (\<= current end) (\< current end)))

                (and (\< step 0) (if inclusive? (\>= current end) (\> current end))))

            (proc current)

            (loop (+ current step))))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/range-test.scm|true|true>
    (check-false ((range :inclusive 1 3) :empty?))

    (check-true ((range :inclusive 3 1) :empty?))

    (check-false ((range :inclusive 1 3 0) :empty?))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/range-test.scm|true|false>
    (let1 r1 (range :inclusive -2 1)

      (let1 map-func (lambda (x) (* x x))

      (let1 r2 (r1 :map map-func)

      (check r2 =\<gtr\> (rich-list (list 4 1 0 1))))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|goldfish/liii/range.scm|true|true>
    (define (%filter f)

    \ \ (if (%empty?)

    \ \ \ \ \ \ <code*|(rich-list :empty)>

    \ \ \ \ \ \ (let loop ((i start) (return '()))

    \ \ \ \ \ \ \ \ (cond

    \ \ \ \ \ \ \ \ \ \ ((or (and (\<gtr\> step 0) (\<gtr\> i end))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (and (\<less\> step 0) (\<less\> i end))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (and (= i end) (not inclusive?)))

    \ \ \ \ \ \ \ \ \ \ \ (rich-list (reverse return)))

    \ \ \ \ \ \ \ \ \ \ (else

    \ \ \ \ \ \ \ \ \ \ \ (loop (+ i step)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (if (f i)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (cons i return)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ return)))))))

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/range-test.scm|true|true>
    (let1 r (range 0 10 1 #f)

    \ \ (check (r :filter even?) =\<gtr\> ($ (list 0 2 4 6 8)))

    \ \ (check (r :filter (lambda (x) (\<gtr\> x 5))) =\<gtr\> ($ (list 6 7 8 9)))

    \ \ (check (r :filter (lambda (x) (\<less\> x 0))) =\<gtr\> ($ (list ))))

    \;

    (let1 r (range 5 1 -1 #t)

    \ \ (check (r :filter odd?) =\<gtr\> ($ (list 5 3 1))))
  </goldfish-chunk>

  <subsection|结尾>

  <\goldfish-chunk|goldfish/liii/range.scm|true|false>
    ) ; define-case-cass

    ) ; begin

    ) ; define-library

    \;
  </goldfish-chunk>

  <\goldfish-chunk|tests/goldfish/liii/range-test.scm|true|false>
    (check-report)

    \;
  </goldfish-chunk>
</body>

<\initial>
  <\collection>
    <associate|font-base-size|12>
    <associate|page-height|auto>
    <associate|page-orientation|landscape>
    <associate|page-screen-margin|false>
    <associate|page-type|a4>
    <associate|page-width|auto>
    <associate|preamble|false>
    <associate|save-aux|false>
  </collection>
</initial>
