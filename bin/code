#!/usr/bin/env elvish

use path
use str
use platform

# 只有在有参数的情况下才检查main分支
if (== (count $args) 0) {
    echo "No branch argument provided, skipping main branch check..."
} else {
    # 取当前分支名
    var current-branch = (git rev-parse --abbrev-ref HEAD)
    
    if (not-eq $current-branch main) {
        echo (styled "Error: You are not on the main branch. Current branch: "$current-branch red)
        echo (styled "Please switch to main branch first: git checkout main" yellow)
        exit 1
    }
    
    echo "Already on main branch."
}


# 检查是否真的在main分支上，才进行拉取
if (eq (git rev-parse --abbrev-ref HEAD) main) {
    # 检查是否存在origin远程仓库
    var has_origin
    if $platform:is-windows {
        set has_origin = ?(git remote get-url origin > NUL 2>&1)
    } else {
        set has_origin = ?(git remote get-url origin > /dev/null 2>&1)
    }
    
    # 如果origin不存在，添加origin并拉取，然后移除origin
    if (not $has_origin) {
        echo "Adding origin git@gitee.com:XmacsLabs/goldfish.git..."
        git remote add origin git@gitee.com:XmacsLabs/goldfish.git
        echo "Pulling latest code from main branch..."
        git pull origin main
        echo "Removing temporary origin...\n"
    } else {
        # 如果origin存在，直接拉取
        echo "Pulling latest code from main branch..."
        git pull origin main
    }
} else {
    echo "Not on main branch, skipping git pull from origin/main..."
}

# 检查是否有参数
if (== (count $args) 0) {
    # 没有参数，直接进入 ccr code 而不使用 worktree
    echo "No branch argument provided, using current directory..."
} else {
    # 有参数，使用 worktree 创建新工作空间
    var branch_name = (path:base $args[0])
    var timestamp = (date +%Y%m%d_%H%M%S_%N)
    var workspace_dir
    if $platform:is-windows {
        set workspace_dir = (get-env TEMP)/goldfish/$branch_name/$timestamp
    } else {
        set workspace_dir = /tmp/goldfish/$branch_name/$timestamp
    }
    
    # 使用git worktree创建新的工作空间
    echo "Creating workspace with git worktree: $workspace_dir"
    git worktree add -b $branch_name $workspace_dir
    
    # 切换到工作空间
    cd $workspace_dir
}

claude config add allowedTools "Bash(git:*)"
claude config add allowedTools "Edit"
claude config add allowedTools "Bash(xmake:*)"
claude config add allowedTools "Bash(./bin/goldfish:*)"
claude config add allowedTools "Bash(bin/goldfish:*)"
claude config add allowedTools "Bash(grep:*)"
claude config add allowedTools "Bash(find:*)"
claude config add allowedTools "Bash(echo:*)"

# 检查ccr命令是否存在
if $platform:is-windows {
    # Windows系统使用where命令
    if (not ?(where ccr)) {
        echo "Error: ccr command not found. Please install ccr."
        exit 1
    }
} else {
    # Unix/Linux系统使用which命令
    if (not ?(which ccr)) {
        echo "Error: ccr command not found. Please install ccr."
        exit 1
    }
}

# 启动ccr code
echo "Starting ccr code..."
ccr code
